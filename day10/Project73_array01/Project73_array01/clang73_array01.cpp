#include <iostream>

int main() {
    int arr[5] = { 1,2,3,4,5 }; // 5개의 정수로 구성된 배열을 선언하고 초기화.

    int* parr = arr; // 배열의 첫 번째 원소의 주소를 포인터 parr에 할당합니다. 배열 이름은 배열의 첫 번째 원소의 주소를 나타냄.

    // 배열의 메모리 주소를 출력함. 
    // %p는 주소를 출력하기 위한 포맷 지정자.
    printf("arr address: %p\n", arr);

    // 배열의 전체 크기를 출력합니다. sizeof 연산자는 배열 전체의 크기를 바이트 단위로 반환됨.
    // int 타입의 크기는 플랫폼에 따라 다를 수 있지만, 일반적으로 4바이트입니다. 따라서, int 타입 5개로 구성된 배열의 크기는 20바이트가 됨.
    printf("arr 크기: %u\n", sizeof(arr));

    // 배열의 첫 번째 원소의 메모리 주소를 출력합니다.
    printf("arr[0] 주소: %p\n", &arr[0]);

    // 배열의 두 번째 원소의 메모리 주소를 출력합니다.
    printf("arr[1] 주소: %p\n", &arr[1]);

    // 배열 이름에 1을 더한 것의 주소를 출력합니다. 이 연산은 배열의 첫 번째 원소에서 다음 원소로의 주소 이동을 의미함.
    // C/C++에서 배열 이름은 포인터로 취급되며, 이는 배열의 첫 번째 원소를 가리키는 포인터.
    // 따라서, arr + 1은 첫 번째 원소의 주소에서 int의 크기(보통 4바이트)만큼 이동한 주소, 즉 두 번째 원소의 주소를 나타냄.
    printf("arr + 1 주소: %p\n", arr + 1);

    // 포인터 parr의 주소를 출력함.
    printf("parr address : %p\n", &parr);

    // 포인터 parr이 가리키는 값, 즉 배열 arr의 주소를 출력함.
    printf("parr data : %p\n", parr); // 배열 arr의 주소를 저장함

    // 포인터 parr에 1을 더한 후의 값, 즉 배열의 첫 번째 원소에서 다음 원소로 이동한 주소를 출력함.
    // parr은 int 타입을 가리키는 포인터이므로, 1을 더할 때 포인터가 가리키는 타입의 크기만큼 주소가 증가함.
    printf("parr + 1 :  %p\n ", parr + 1);

    // 배열의 첫 번째 원소에 접근한 것과 동일한 결과를 출력함.
    // parr[0]과 *parr은 배열의 첫 번째 원소를 가리키며, arr[0] 역시 동일한 값을 가리킴.
    // 따라서 출력 결과는 모두 배열의 첫 번째 원소의 값인 1이 출력함.
    printf("parr[0] :  %d *pa:%d  arr[0]: %d\n ", parr[0], *parr, arr[0]);

    return 0;
}
